package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JOptionPane;

import model.Board;
import model.Board.State;
import model.Game;
import view.TTTMainView;

public class TTTController implements ActionListener {

	private Game theGame;
	private TTTMainView theView;
	private JButton[][] allButtons;
	private Board theBoard;

	/**
	 * @param theGame
	 * @param theView
	 */
	public TTTController(Game theGame, TTTMainView theView) {
		this.theGame = theGame;
		this.theView = theView;
		this.theBoard = theGame.getTheBoard();

		this.allButtons = theView.getViewBoardPanel().getAllButtons();
		this.registerButtons();
	}

	/**
	 * Register all buttons on the board (addActionListener)
	 */
	public void registerButtons() {
		for (int row = 0; row < 3; row++) {
			for (int col = 0; col < 3; col++) {
				this.allButtons[row][col].addActionListener(this);
			}
		}
	}

	/**
	 * ActionEvent event handler for the program. This handles all ActionEvent
	 * instances, and therefore this checks the source of the event using
	 * getSource(). This handler also catches any bad input, and displays a
	 * JOptionPane to the user
	 * 
	 * @param e
	 *            - An ActionEvent event generated by the GUI
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		for (int row = 0; row < 3; row++) {
			for (int col = 0; col < 3; col++) {
				this.attemptAction(e, row, col);
			}
		}
	}

	/**
	 * attempt move with event e, and row, col
	 */
	public void attemptAction(ActionEvent e, int row, int col) {
		if ((e.getSource() == this.allButtons[row][col])) {
			if (this.theBoard.getState() == State.NEW
					|| this.theBoard.getState() == State.PLAYING) {

				if (!this.theBoard.setMark(row, col,
						this.theGame.getPlayers()[this.theGame
								.getCurrentPlayer()].getMyMark())) {
					// do nothing, illegal move
				} else {
					String currentMark = this.theGame.getCurrentPlayerMark();
					this.allButtons[row][col].setText(currentMark);
					if (this.theBoard
							.isWinFor(this.theGame.getPlayers()[this.theGame
									.getCurrentPlayer()])) {
						this.theView.getViewStatsPanel().updateStatsPanelWin(
								this.theGame.getPlayers()[this.theGame
										.getCurrentPlayer()]);
						if (!(JOptionPane.showOptionDialog(
								null,
								"Play one more time?", // TRY
														// AGAIN?
								"Player " + currentMark + " wins!",
								JOptionPane.YES_NO_OPTION,
								JOptionPane.QUESTION_MESSAGE, null, null, null) == JOptionPane.YES_OPTION)) {
							JOptionPane.showMessageDialog(null, "Goodbye!"); // GOODBYE
							return;
						}
						this.theBoard.clear();
						this.theView.clearBoard();
						// that player wins!
					} else if (this.theBoard.isDraw()) {
						this.theView.getViewStatsPanel().updateStatsPanelDraw();
						if (!(JOptionPane.showOptionDialog(
								null,
								"Play one more time?", // TRY
														// AGAIN?
								"Draw!", JOptionPane.YES_NO_OPTION,
								JOptionPane.QUESTION_MESSAGE, null, null, null) == JOptionPane.YES_OPTION)) {
							JOptionPane.showMessageDialog(null, "Goodbye!"); // GOODBYE
							return;
						}
						this.theBoard.clear();
						this.theView.clearBoard();
						// is a draw!
					} else {
						// switch players
						this.theGame.setCurrentPlayer(Math.abs(1 - this.theGame
								.getCurrentPlayer()));
						this.theView.getViewStatsPanel()
								.updateStatsPanelNextPlayer();
					}
				}

			}

		}
	}
}
